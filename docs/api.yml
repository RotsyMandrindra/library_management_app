openapi: 3.0.3
info:
  title: Library API
  version: 1.6.0
  description: STD22001
servers:
  - url: https://library.com
tags:
  - Books
  - Authors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: page
          description: pagination parameter
          schema:
            $ref: '#/components/schemas/Pagination'
      responses:
        200:
          $ref: '#/components/schemas/200Response'
        400:
          $ref: '#/components/schemas/400Response'
        403:
          $ref: '#/components/schemas/403Response'
        500:
          $ref: '#/components/schemas/500Response'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          $ref: '#/components/schemas/200Response'
        400:
          $ref: '#/components/schemas/400Response'
        403:
          $ref: '#/components/schemas/403Response'
        500:
          $ref: '#/components/schemas/500Response'
  /books/import:
    post:
      summary: Returned a list of imported Books
      operationId: importedBooks
      tags:
        - Books
      parameters:
        - name: import
          in: path
          description: Returned a list of imported book
          schema:
            type: string
          required: false
      responses:
          200:
            $ref: '#/components/schemas/200Response'
          400:
           $ref: '#/components/schemas/400Response'
          403:
            $ref: '#/components/schemas/403Response'
          500:
            $ref: '#/components/schemas/500Response'
      security:
        -OAuth2:
          - admin
  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
        - in: path
          name: page
          description: pagination parameter
          schema:
            type: integer
            default: 1
        - in: path
          name: pageSize
          description: pagination parameter
          schema:
            $ref: '#/components/schemas/Pagination'
      responses:
        200:
          $ref: '#/components/schemas/200Response'
        400:
          $ref: '#/components/schemas/400Response'
        403:
          $ref: '#/components/schemas/403Response'
        500:
          $ref: '#/components/schemas/500Response'
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          $ref: '#/components/schemas/200Response'
        400:
          $ref: '#/components/schemas/400Response'
        403:
          $ref: '#/components/schemas/403Response'
        500:
          $ref: '#/components/schemas/500Response'
  /authors/books:
    delete:
      summary: Delete authors
      operationId: deleteAuthors
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Authors delete
          schema:
            type: string
          required: false
      responses:
        200:
          $ref: '#/components/schemas/200Response'
        400:
          $ref: '#/components/schemas/400Response'
        403:
          $ref: '#/components/schemas/403Response'
        500:
          $ref: '#/components/schemas/500Response'
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/schemas/200Response'
        400:
          $ref: '#/components/schemas/400Response'
        403:
          $ref: '#/components/schemas/403Response'
        500:
          $ref: '#/components/schemas/500Response'
  /books/{bId}/authors/{aId}:
    put:
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/200Response'
        400:
          $ref: '#/components/schemas/400Response'
        403:
          $ref: '#/components/schemas/403Response'
        500:
          $ref: '#/components/schemas/500Response'
  /author/imports:
    post:
      operationId: importAuthors
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportAuthor'
                - type: file
                  format: application/vnd.ms-excel
      security:
        -OAuth2:
          - admin
  /visitors/{visitorsId}/borrow/{bookId}:
    post:
      summary: Borrow a book
      parameters:
        - in: path
          name: visitorsId
          required: true
          description: Visitor Id
          schema:
            type: string
        - in: path
          name: bookId
          required: true
          description: Book id
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/200Response'
        400:
          $ref: '#/components/schemas/400Response'
        403:
          $ref: '#/components/schemas/403Response'
        500:
          $ref: '#/components/schemas/500Response'
      security:
        -OAuth2:
          - admin
  /visitors/{visitorsId}/return/{bookId}:
    post:
      summary: Return a book
      parameters:
        - in: path
          name: visitorsId
          required: true
          description: Visitor Id
          schema:
            type: string
        - in: path
          name: bookId
          required: true
          description: Book id
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/200Response'
        400:
          $ref: '#/components/schemas/400Response'
        403:
          $ref: '#/components/schemas/403Response'
        500:
          $ref: '#/components/schemas/500Response'
      security:
        -OAuth2:
          - admin
  /books/status:
    get:
      summary: A list of borrowed and available book
      responses:
        200:
          description: The server run successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      borrowed:
                        type: array
                        items:
                          $ref: '#/components/schemas/Book'
                      available:
                        type: array
                        items:
                          $ref: '#/components/schemas/Book'
                  response:
                    $ref: '#/components/schemas/200Response'
        400:
          $ref: '#/components/schemas/400Response'
        403:
          $ref: '#/components/schemas/403Response'
        500:
          $ref: '#/components/schemas/500Response'
  /visitors/{visitorsId}/borrowed-books:
    get:
      summary: A list of borrowed book by the visitor
      parameters:
        - in: path
          name: visitorsId
          required: true
          description: visitor id
          schema:
            type: string
      responses:
        200:
          description: The server run successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BorrowedBook'
                  response:
                    $ref: '#/components/schemas/200Response'
        400:
          $ref: '#/components/schemas/400Response'
        403:
          $ref: '#/components/schemas/403Response'
        500:
          $ref: '#/components/schemas/500Response'
  /visitors/{visitorId}/returned-books:
    get:
      summary: A list of returned book by the visitor
      parameters:
        - name: visitorId
          in: path
          required: true
          description: visitorId
          schema:
            type: string
      responses:
        '200':
          description: The server run successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReturnedBook'
                  response:
                    $ref: '#/components/schemas/200Response'
        400:
         $ref: '#/components/schemas/400Response'
        403:
          $ref: '#/components/schemas/403Response'
        500:
          $ref: '#/components/schemas/500Response'
  /visitors/{visitorId}/activities:
    get:
      summary: Visitor activities over a given period
      parameters:
        - name: visitorId
          in: path
          required: true
          description: Id visitor
          schema:
            type: string
        - name: startDate
          in: query
          required: true
          description: |
            Period start date
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          description: |
            Period end date
          schema:
            type: string
            format: date
      responses:
        '200':
          description: The server run successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/BorrowedBook'
                    - $ref: '#/components/schemas/ReturnedBook'
        400:
          $ref: '#/components/schemas/400Response'
        403:
          $ref: '#/components/schemas/403Response'
        500:
          $ref: '#/components/schemas/500Response'
  /books/available:
    get:
      summary: List of available books
      responses:
        '200':
          description: List of books currently available
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
                  response:
                    $ref: '#/components/schemas/200Response'
        400:
          $ref: '#/components/schemas/400Response'
        403:
          $ref: '#/components/schemas/403Response'
        500:
          $ref: '#/components/schemas/500Response'
components:
  schemas:
    Book:
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
        - properties:
            author:
              $ref: '#/components/schemas/Author'
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    CrupdateBook:
      type: object
      properties:
        ID:
          type: integer
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Pagination:
      type: object
      properties:
        Page:
          type: integer
          default: 1
        PageSize:
          type: integer
          default: 50
    Responses:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
        body:
          type: object
    200Response:
      allOf:
        - $ref: '#/components/schemas/Responses'
        - type: object
          properties:
            data:
              type: string
    400Response:
      allOf:
        - $ref: '#/components/schemas/Responses'
        - type: object
          properties:
            data:
              type: string
    403Response:
      allOf:
        - $ref: '#/components/schemas/Responses'
        - type: object
          properties:
            data:
              type: string
    500Response:
      allOf:
        - $ref: '#/components/schemas/Responses'
        - type: object
          properties:
            data:
              type: string
    BadRequestBody:
      allOf:
        - $ref: '#/components/schemas/Responses'
          example:
            status:
              code: 400
              message: BAD REQUEST
    ImportAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex:
          type: string

    ImportBook:
      type: object
      properties:
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/ImportAuthor'
        pageNumbers:
          type: integer
        topic:
          type: string
        releaseDate:
          type: string
        idAuthor:
          type: integer
    Visitor:
      type: object
      properties:
        ID:
          type: string
        name:
          type: string
        reference:
          type: string
    ReturnedBook:
      type: object
      properties:
        bookId:
          type: string
          description: BookIdReturn
        bookName:
          type: string
          description: BookNameReturn
        returnDate:
          type: string
          format: date
          description: ReturnBookDate
    BorrowedBook:
      type: object
      properties:
        bookId:
          type: string
          description: IdBookBorrow
        bookName:
          type: string
          description: NameBookBorrow
        borrowDate:
          type: string
          format: date
          description: DateBookBorrow
  parameters:
    queryPagination:
      in: query
      name: queryPagination
      schema:
        $ref: '#/components/schemas/Pagination'
    pathPagination:
      in: path
      name: pathPagination
      schema: '#/components/schemas/Pagination'
  securitySchemes:
    OAuth2:
      type: OAuth2
      flows:
        password:
          tokenUrl: 'https://library/token'
      scopes:
        admin: Administrator access